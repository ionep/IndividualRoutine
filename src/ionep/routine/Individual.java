package ionep.routine;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import javax.swing.JFileChooser;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.CellRangeUtil;

/**
 *
 * @author ionep
 */
public class Individual extends javax.swing.JFrame {

    /**
     * Creates new form Individual
     */
    private Workbook workbook;
    private Sheet sheet;
    private Row row;
    //row and column starts from 0
    //these numbers are from standard format of routine
    private int yearPart=3;
    private int program=4;
    private int routineStartRow=8;
    private int routineEndRow=19;
    
    public Individual() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        open = new javax.swing.JButton();
        teacherField = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        open.setText("Open File");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        teacherField.setText("Teachers abreviation");
        teacherField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherFieldActionPerformed(evt);
            }
        });

        file.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        file.add(jMenuItem1);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        jMenuBar1.add(file);

        edit.setText("Edit");
        jMenuBar1.add(edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error)
                    .addComponent(open)
                    .addComponent(teacherField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(error)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(teacherField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(open)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        closeApplication();
    }//GEN-LAST:event_exitActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        
        if(teacherField.getText().isEmpty())
        {
            error.setText("Please input teacher's name");
        }
        else{
            error.setText("");
            String teacher=teacherField.getText();
            //file choosing box
            JFileChooser chooser=new JFileChooser();
            chooser.showOpenDialog(null);
            File f=chooser.getSelectedFile();
            //store the file path
            String filename=f.getAbsolutePath();
            try{
                //read file from the path chosen
                FileInputStream fileInputStream=new FileInputStream(filename);
                workbook=WorkbookFactory.create(fileInputStream);
                
                String sheetName=null;
                Cell[] matchedCell=new Cell[200];
                int matchedCellCount=0;
                //store matched cells
                //to store the start and end of the cell
                //0 --> firstrow
                //1 --> firstcol
                //2 --> lastrow
                //3 --> lastcol
                int[][] mergedCellCoordinates=new int[200][4];
                
                //get the contents of the routine like part year and program
                //0 --> year and part
                //1 --> program
                String[][] yearProgram=new String[200][2];
                
                //to iterate over all the sheets
                for(int sheets=0;sheets<workbook.getNumberOfSheets();sheets++){
                    sheetName=workbook.getSheetName(sheets);
                    sheet=workbook.getSheet(sheetName);
                    //get no of rows
                    int noOfRows=sheet.getLastRowNum();
                    
                    //lets get the year, part and program and store onto array
                    String yearPartString=sheet.getRow(yearPart).getCell(0).toString();
                    int findIndex=yearPartString.indexOf(":");
                    yearPartString=yearPartString.substring(findIndex+1,yearPartString.length());
                    yearPartString=yearPartString.replaceAll("\\s","");
                    
                    
                    String programString=sheet.getRow(program).getCell(0).toString();
                    findIndex=programString.indexOf(":");
                    programString=programString.substring(findIndex+1,programString.length());
                    programString=programString.replaceAll("\\s","");
                    
                    
                    //iterate over all the rows starting from routine
                    for(int i=routineStartRow;i<=routineEndRow;i++){
                        //iterate over all cells
                        for(Cell data:sheet.getRow(i)){
                            if(data!=null){
                                String subject=data.toString();
                                int index=subject.indexOf(teacher);

                                if(index>=0)//match found
                                {
                                    //check if it has a merged region
                                    CellRangeAddress mergeCell=getMergedCellData(sheet, data.getRowIndex(), data.getColumnIndex());
                                    if(mergeCell!=null){
                                        //store coordinates of merged region
                                        mergedCellCoordinates[matchedCellCount][0]=mergeCell.getFirstRow();
                                        mergedCellCoordinates[matchedCellCount][1]=mergeCell.getFirstColumn();
                                        mergedCellCoordinates[matchedCellCount][2]=mergeCell.getLastRow();
                                        mergedCellCoordinates[matchedCellCount][3]=mergeCell.getLastColumn();
                                    }
                                    else{
                                        //if not merged just give its own coordinates
                                        mergedCellCoordinates[matchedCellCount][0]=data.getRowIndex();
                                        mergedCellCoordinates[matchedCellCount][1]=data.getColumnIndex();
                                        mergedCellCoordinates[matchedCellCount][2]=mergedCellCoordinates[matchedCellCount][0];
                                        mergedCellCoordinates[matchedCellCount][3]=mergedCellCoordinates[matchedCellCount][1];
                                    }


                                    //store the matched cell to the array
                                    matchedCell[matchedCellCount]=data;
                                    
                                    //store the year, part and program data too
                                    yearProgram[matchedCellCount][0]=yearPartString;
                                    yearProgram[matchedCellCount][1]=programString;
                                    matchedCellCount++;
                                }
                            }   
                        }
                    }
                    /*
                    for displaying the data and debugging
                    for(int i=0;i<matchedCellCount;i++){
                        System.out.println(matchedCell[i]);
                        System.out.println(mergedCellCoordinates[i][0]);
                        System.out.println(mergedCellCoordinates[i][1]);
                        System.out.println(mergedCellCoordinates[i][2]);
                        System.out.println(mergedCellCoordinates[i][3]);
                    }
                    */
                }
                if(matchedCellCount>0){
                    //read and copy the template
                    Path src = FileSystems.getDefault().getPath("C:\\Users\\dell\\Desktop\\Routine\\template.xlsx");
//                    Path dest = FileSystems.getDefault().getPath("C:\\Users\\dell\\Desktop\\Routine\\"+teacher+".xlsx");
                    Path dest = FileSystems.getDefault().getPath("C:\\Users\\dell\\Desktop\\Routine\\individual.xlsx");
                    if(!Files.exists(dest))
                    {
                        Files.copy(src, dest, StandardCopyOption.REPLACE_EXISTING);
                    }
                    FileInputStream fileInputStream2=new FileInputStream(dest.toFile());
                    Workbook workbook2=WorkbookFactory.create(fileInputStream2);
                    
                    Sheet sheet2=workbook2.getSheet(workbook2.getSheetName(0));
                    //check if sheet exists and override
                    for(int sheets=0;sheets<workbook2.getNumberOfSheets();sheets++){
                        sheetName=workbook2.getSheetName(sheets);
                        if(sheetName.equals(teacher))
                        {
                            workbook2.removeSheetAt(sheets);
                            sheet2=workbook2.cloneSheet(0);
                            workbook2.setSheetName(workbook2.getSheetIndex(sheet2), teacher);
                            break;
                        }
                        //if the last sheet doesnt match, create a new sheet
                        else if(sheets==workbook2.getNumberOfSheets()-1)
                        {
                            sheet2=workbook2.cloneSheet(0);
                            workbook2.setSheetName(workbook2.getSheetIndex(sheet2), teacher);
                            break;
                        }
                    }
                    boolean foundOverlap=false;
                    String overlapError="Overlap on day:";
                    //lets first merge all the needed ones
                    for(int i=0;i<matchedCellCount;i++){
                        Cell cell=sheet2.getRow(mergedCellCoordinates[i][0]).getCell(mergedCellCoordinates[i][1]);
                        try{
                            //lets check if any routine overlaps
                            for (CellRangeAddress mergedRegion : sheet2.getMergedRegions()) {
                                if(CellRangeUtil.intersect(new CellRangeAddress(mergedCellCoordinates[i][0],mergedCellCoordinates[i][2],
                                            mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]),mergedRegion)!=CellRangeUtil.NO_INTERSECTION){
                                    if(mergedCellCoordinates[i][0]%2==0)
                                    {
                                        // check if the day is already registered in case of multiple overlaps in single day
                                        if(!overlapError.contains(sheet2.getRow(mergedCellCoordinates[i][0]).getCell(0).toString()))
                                        {
                                            overlapError=overlapError+" "+sheet2.getRow(mergedCellCoordinates[i][0]).getCell(0)
                                                    +"-"+sheet2.getRow(7).getCell(mergedCellCoordinates[i][1]).toString().substring(0,1)+" ";
                                        }
//                                        error.setText("Overlap on day: "+sheet2.getRow(mergedCellCoordinates[i][0]).getCell(0));
                                    }
                                    else
                                    {
                                        // check if the day is already registered in case of multiple overlaps in single day
                                        if(!overlapError.contains(sheet2.getRow(mergedCellCoordinates[i][0]).getCell(0).toString())){
                                            overlapError=overlapError+" "+sheet2.getRow(mergedCellCoordinates[i][0]-1).getCell(0)
                                                    +"-"+sheet2.getRow(7).getCell(mergedCellCoordinates[i][1]).toString().substring(0,1)+" ";
                                        }
//                                        error.setText("Overlap on day: "+sheet2.getRow(mergedCellCoordinates[i][0]-1).getCell(0));
                                    }
                                    foundOverlap=true;
                                }
                            }
                            //check if it is single cell only
                            if(mergedCellCoordinates[i][0]!=mergedCellCoordinates[i][2] || mergedCellCoordinates[i][1]!=mergedCellCoordinates[i][3]){
                                //check if it is merged in only one row.. if yes, then merge multiple rows
                                if(mergedCellCoordinates[i][0]==mergedCellCoordinates[i][2])
                                {
                                    if(mergedCellCoordinates[i][0]%2==0)
                                    {
                                        sheet2.addMergedRegion(new CellRangeAddress(mergedCellCoordinates[i][0],mergedCellCoordinates[i][2]+1,
                                            mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]));
                                    }
                                    else{
                                        sheet2.addMergedRegion(new CellRangeAddress(mergedCellCoordinates[i][0]-1,mergedCellCoordinates[i][2],
                                            mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]));
                                        cell=sheet2.getRow(mergedCellCoordinates[i][0]-1).getCell(mergedCellCoordinates[i][1]);
                                    }
                                }
                                else{
                                    sheet2.addMergedRegion(new CellRangeAddress(mergedCellCoordinates[i][0],mergedCellCoordinates[i][2],
                                        mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]));
                                }
                            }
                            //in case of single class but alternate weeks
                            else{
                                if(mergedCellCoordinates[i][0]%2==0)
                                {
                                    sheet2.addMergedRegion(new CellRangeAddress(mergedCellCoordinates[i][0],mergedCellCoordinates[i][2]+1,
                                        mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]));
                                }
                                else{
                                    sheet2.addMergedRegion(new CellRangeAddress(mergedCellCoordinates[i][0]-1,mergedCellCoordinates[i][2],
                                        mergedCellCoordinates[i][1],mergedCellCoordinates[i][3]));
                                    cell=sheet2.getRow(mergedCellCoordinates[i][0]-1).getCell(mergedCellCoordinates[i][1]);
                                } 
                            }
                        }
                        catch(IllegalStateException e)
                        {
                            System.out.println("Illegal");
                        }
                        //put the text as needed
//                        cell=sheet2.getRow(mergedCellCoordinates[i][0]).getCell(mergedCellCoordinates[i][1]);
                        
                        // customize some of the contents of the subject name
                        String dataBuffer=matchedCell[i].toString();
                        int index=dataBuffer.indexOf("["+teacher+"]");
                        String split;
                        if(index>0)
                        {
                            split=dataBuffer.substring(0,index)+dataBuffer.substring(index+2+teacher.length(),dataBuffer.length());
                        }
                        else{
                            split=dataBuffer;
                        }
                        split=split+" ["+yearProgram[i][1]+" "+yearProgram[i][0]+"]";
                        //set the data as the required
                        cell.setCellValue(split);
                        
                        CellStyle style= cell.getCellStyle(); 
                        style.setAlignment(HorizontalAlignment.CENTER);
                        //style.setFillBackgroundColor(IndexedColors.GREEN.getIndex());  
                        //style.setFillPattern(FillPatternType.LEAST_DOTS);
                        cell.setCellStyle(style);
                    }
                    if(foundOverlap)
                    {
                        error.setText(overlapError);
                        try{
                            workbook2.removeSheetAt(workbook2.getSheetIndex(sheet2));
                            System.out.println("Deleted");
                        }
                        catch(Exception e){
                            System.out.println("Error in deleting");
                        }
                        fileInputStream.close();
                        fileInputStream2.close();
                        return;
                    }
                    FileOutputStream fileOutputStream=new FileOutputStream(dest.toFile());
                    workbook2.write(fileOutputStream);
                    fileOutputStream.flush();
                    fileOutputStream.close();
                    fileInputStream.close();
                    fileInputStream2.close();
                    error.setText("File Created");
                }
                else{
                    error.setText("Teacher Not Found");
                }
            }

            catch(FileNotFoundException e){
                error.setText("Please check if file is opened and close it.");
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_openActionPerformed

    private void teacherFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teacherFieldActionPerformed
    
    private CellRangeAddress getMergedCellData(Sheet sheet, int rowIx, int colIx)
    {
        //get the cell to search
        Cell c = sheet.getRow(rowIx).getCell(colIx);
        
        for (CellRangeAddress mergedRegion : sheet.getMergedRegions()) {
            if (mergedRegion.isInRange(rowIx, colIx)) {
                // The cell wanted is in this merged range
                // Return the CellRangeAddress
                return mergedRegion;
            }
        }
         
        // If we get here, then the cell isn't defined, and doesn't
        //  live within any merged regions
        return null;
    }
    private void closeApplication()
    {
        WindowEvent winClose=new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClose);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Individual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Individual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Individual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Individual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Individual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu edit;
    private javax.swing.JLabel error;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton open;
    private javax.swing.JTextField teacherField;
    // End of variables declaration//GEN-END:variables
}
